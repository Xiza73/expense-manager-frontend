/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TransactionImport } from './routes/transaction'
import { Route as ServicetImport } from './routes/servicet'
import { Route as ExpenseManagerImport } from './routes/expense-manager'
import { Route as AuthImport } from './routes/auth'
import { Route as AccountImport } from './routes/account'
import { Route as IndexImport } from './routes/index'
import { Route as TransactionIndexImport } from './routes/transaction.index'
import { Route as ServiceIndexImport } from './routes/service.index'
import { Route as AuthIndexImport } from './routes/auth.index'
import { Route as AccountIndexImport } from './routes/account.index'
import { Route as AccountAccountIdImport } from './routes/account.$accountId'
import { Route as TransactionEditTransactionIdImport } from './routes/transaction.edit.$transactionId'
import { Route as TransactionCreateAccountIdImport } from './routes/transaction.create.$accountId'
import { Route as ServiceEditServiceIdImport } from './routes/service.edit.$serviceId'
import { Route as AccountUpdateAccountIdImport } from './routes/account.update.$accountId'
import { Route as AccountEditAccountIdImport } from './routes/account.edit.$accountId'

// Create Virtual Routes

const ServiceCreateLazyImport = createFileRoute('/service/create')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const AccountCreateLazyImport = createFileRoute('/account/create')()

// Create/Update Routes

const TransactionRoute = TransactionImport.update({
  id: '/transaction',
  path: '/transaction',
  getParentRoute: () => rootRoute,
} as any)

const ServicetRoute = ServicetImport.update({
  id: '/servicet',
  path: '/servicet',
  getParentRoute: () => rootRoute,
} as any)

const ExpenseManagerRoute = ExpenseManagerImport.update({
  id: '/expense-manager',
  path: '/expense-manager',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TransactionIndexRoute = TransactionIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TransactionRoute,
} as any)

const ServiceIndexRoute = ServiceIndexImport.update({
  id: '/service/',
  path: '/service/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountRoute,
} as any)

const ServiceCreateLazyRoute = ServiceCreateLazyImport.update({
  id: '/service/create',
  path: '/service/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/service.create.lazy').then((d) => d.Route),
)

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth.login.lazy').then((d) => d.Route))

const AccountCreateLazyRoute = AccountCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AccountRoute,
} as any).lazy(() =>
  import('./routes/account.create.lazy').then((d) => d.Route),
)

const AccountAccountIdRoute = AccountAccountIdImport.update({
  id: '/$accountId',
  path: '/$accountId',
  getParentRoute: () => AccountRoute,
} as any)

const TransactionEditTransactionIdRoute =
  TransactionEditTransactionIdImport.update({
    id: '/edit/$transactionId',
    path: '/edit/$transactionId',
    getParentRoute: () => TransactionRoute,
  } as any)

const TransactionCreateAccountIdRoute = TransactionCreateAccountIdImport.update(
  {
    id: '/create/$accountId',
    path: '/create/$accountId',
    getParentRoute: () => TransactionRoute,
  } as any,
)

const ServiceEditServiceIdRoute = ServiceEditServiceIdImport.update({
  id: '/service/edit/$serviceId',
  path: '/service/edit/$serviceId',
  getParentRoute: () => rootRoute,
} as any)

const AccountUpdateAccountIdRoute = AccountUpdateAccountIdImport.update({
  id: '/update/$accountId',
  path: '/update/$accountId',
  getParentRoute: () => AccountRoute,
} as any)

const AccountEditAccountIdRoute = AccountEditAccountIdImport.update({
  id: '/edit/$accountId',
  path: '/edit/$accountId',
  getParentRoute: () => AccountRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/expense-manager': {
      id: '/expense-manager'
      path: '/expense-manager'
      fullPath: '/expense-manager'
      preLoaderRoute: typeof ExpenseManagerImport
      parentRoute: typeof rootRoute
    }
    '/servicet': {
      id: '/servicet'
      path: '/servicet'
      fullPath: '/servicet'
      preLoaderRoute: typeof ServicetImport
      parentRoute: typeof rootRoute
    }
    '/transaction': {
      id: '/transaction'
      path: '/transaction'
      fullPath: '/transaction'
      preLoaderRoute: typeof TransactionImport
      parentRoute: typeof rootRoute
    }
    '/account/$accountId': {
      id: '/account/$accountId'
      path: '/$accountId'
      fullPath: '/account/$accountId'
      preLoaderRoute: typeof AccountAccountIdImport
      parentRoute: typeof AccountImport
    }
    '/account/create': {
      id: '/account/create'
      path: '/create'
      fullPath: '/account/create'
      preLoaderRoute: typeof AccountCreateLazyImport
      parentRoute: typeof AccountImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof AuthImport
    }
    '/service/create': {
      id: '/service/create'
      path: '/service/create'
      fullPath: '/service/create'
      preLoaderRoute: typeof ServiceCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/account/': {
      id: '/account/'
      path: '/'
      fullPath: '/account/'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof AccountImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/service/': {
      id: '/service/'
      path: '/service'
      fullPath: '/service'
      preLoaderRoute: typeof ServiceIndexImport
      parentRoute: typeof rootRoute
    }
    '/transaction/': {
      id: '/transaction/'
      path: '/'
      fullPath: '/transaction/'
      preLoaderRoute: typeof TransactionIndexImport
      parentRoute: typeof TransactionImport
    }
    '/account/edit/$accountId': {
      id: '/account/edit/$accountId'
      path: '/edit/$accountId'
      fullPath: '/account/edit/$accountId'
      preLoaderRoute: typeof AccountEditAccountIdImport
      parentRoute: typeof AccountImport
    }
    '/account/update/$accountId': {
      id: '/account/update/$accountId'
      path: '/update/$accountId'
      fullPath: '/account/update/$accountId'
      preLoaderRoute: typeof AccountUpdateAccountIdImport
      parentRoute: typeof AccountImport
    }
    '/service/edit/$serviceId': {
      id: '/service/edit/$serviceId'
      path: '/service/edit/$serviceId'
      fullPath: '/service/edit/$serviceId'
      preLoaderRoute: typeof ServiceEditServiceIdImport
      parentRoute: typeof rootRoute
    }
    '/transaction/create/$accountId': {
      id: '/transaction/create/$accountId'
      path: '/create/$accountId'
      fullPath: '/transaction/create/$accountId'
      preLoaderRoute: typeof TransactionCreateAccountIdImport
      parentRoute: typeof TransactionImport
    }
    '/transaction/edit/$transactionId': {
      id: '/transaction/edit/$transactionId'
      path: '/edit/$transactionId'
      fullPath: '/transaction/edit/$transactionId'
      preLoaderRoute: typeof TransactionEditTransactionIdImport
      parentRoute: typeof TransactionImport
    }
  }
}

// Create and export the route tree

interface AccountRouteChildren {
  AccountAccountIdRoute: typeof AccountAccountIdRoute
  AccountCreateLazyRoute: typeof AccountCreateLazyRoute
  AccountIndexRoute: typeof AccountIndexRoute
  AccountEditAccountIdRoute: typeof AccountEditAccountIdRoute
  AccountUpdateAccountIdRoute: typeof AccountUpdateAccountIdRoute
}

const AccountRouteChildren: AccountRouteChildren = {
  AccountAccountIdRoute: AccountAccountIdRoute,
  AccountCreateLazyRoute: AccountCreateLazyRoute,
  AccountIndexRoute: AccountIndexRoute,
  AccountEditAccountIdRoute: AccountEditAccountIdRoute,
  AccountUpdateAccountIdRoute: AccountUpdateAccountIdRoute,
}

const AccountRouteWithChildren =
  AccountRoute._addFileChildren(AccountRouteChildren)

interface AuthRouteChildren {
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface TransactionRouteChildren {
  TransactionIndexRoute: typeof TransactionIndexRoute
  TransactionCreateAccountIdRoute: typeof TransactionCreateAccountIdRoute
  TransactionEditTransactionIdRoute: typeof TransactionEditTransactionIdRoute
}

const TransactionRouteChildren: TransactionRouteChildren = {
  TransactionIndexRoute: TransactionIndexRoute,
  TransactionCreateAccountIdRoute: TransactionCreateAccountIdRoute,
  TransactionEditTransactionIdRoute: TransactionEditTransactionIdRoute,
}

const TransactionRouteWithChildren = TransactionRoute._addFileChildren(
  TransactionRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/expense-manager': typeof ExpenseManagerRoute
  '/servicet': typeof ServicetRoute
  '/transaction': typeof TransactionRouteWithChildren
  '/account/$accountId': typeof AccountAccountIdRoute
  '/account/create': typeof AccountCreateLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/service/create': typeof ServiceCreateLazyRoute
  '/account/': typeof AccountIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/service': typeof ServiceIndexRoute
  '/transaction/': typeof TransactionIndexRoute
  '/account/edit/$accountId': typeof AccountEditAccountIdRoute
  '/account/update/$accountId': typeof AccountUpdateAccountIdRoute
  '/service/edit/$serviceId': typeof ServiceEditServiceIdRoute
  '/transaction/create/$accountId': typeof TransactionCreateAccountIdRoute
  '/transaction/edit/$transactionId': typeof TransactionEditTransactionIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/expense-manager': typeof ExpenseManagerRoute
  '/servicet': typeof ServicetRoute
  '/account/$accountId': typeof AccountAccountIdRoute
  '/account/create': typeof AccountCreateLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/service/create': typeof ServiceCreateLazyRoute
  '/account': typeof AccountIndexRoute
  '/auth': typeof AuthIndexRoute
  '/service': typeof ServiceIndexRoute
  '/transaction': typeof TransactionIndexRoute
  '/account/edit/$accountId': typeof AccountEditAccountIdRoute
  '/account/update/$accountId': typeof AccountUpdateAccountIdRoute
  '/service/edit/$serviceId': typeof ServiceEditServiceIdRoute
  '/transaction/create/$accountId': typeof TransactionCreateAccountIdRoute
  '/transaction/edit/$transactionId': typeof TransactionEditTransactionIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account': typeof AccountRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/expense-manager': typeof ExpenseManagerRoute
  '/servicet': typeof ServicetRoute
  '/transaction': typeof TransactionRouteWithChildren
  '/account/$accountId': typeof AccountAccountIdRoute
  '/account/create': typeof AccountCreateLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/service/create': typeof ServiceCreateLazyRoute
  '/account/': typeof AccountIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/service/': typeof ServiceIndexRoute
  '/transaction/': typeof TransactionIndexRoute
  '/account/edit/$accountId': typeof AccountEditAccountIdRoute
  '/account/update/$accountId': typeof AccountUpdateAccountIdRoute
  '/service/edit/$serviceId': typeof ServiceEditServiceIdRoute
  '/transaction/create/$accountId': typeof TransactionCreateAccountIdRoute
  '/transaction/edit/$transactionId': typeof TransactionEditTransactionIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/auth'
    | '/expense-manager'
    | '/servicet'
    | '/transaction'
    | '/account/$accountId'
    | '/account/create'
    | '/auth/login'
    | '/service/create'
    | '/account/'
    | '/auth/'
    | '/service'
    | '/transaction/'
    | '/account/edit/$accountId'
    | '/account/update/$accountId'
    | '/service/edit/$serviceId'
    | '/transaction/create/$accountId'
    | '/transaction/edit/$transactionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/expense-manager'
    | '/servicet'
    | '/account/$accountId'
    | '/account/create'
    | '/auth/login'
    | '/service/create'
    | '/account'
    | '/auth'
    | '/service'
    | '/transaction'
    | '/account/edit/$accountId'
    | '/account/update/$accountId'
    | '/service/edit/$serviceId'
    | '/transaction/create/$accountId'
    | '/transaction/edit/$transactionId'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/auth'
    | '/expense-manager'
    | '/servicet'
    | '/transaction'
    | '/account/$accountId'
    | '/account/create'
    | '/auth/login'
    | '/service/create'
    | '/account/'
    | '/auth/'
    | '/service/'
    | '/transaction/'
    | '/account/edit/$accountId'
    | '/account/update/$accountId'
    | '/service/edit/$serviceId'
    | '/transaction/create/$accountId'
    | '/transaction/edit/$transactionId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  ExpenseManagerRoute: typeof ExpenseManagerRoute
  ServicetRoute: typeof ServicetRoute
  TransactionRoute: typeof TransactionRouteWithChildren
  ServiceCreateLazyRoute: typeof ServiceCreateLazyRoute
  ServiceIndexRoute: typeof ServiceIndexRoute
  ServiceEditServiceIdRoute: typeof ServiceEditServiceIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  ExpenseManagerRoute: ExpenseManagerRoute,
  ServicetRoute: ServicetRoute,
  TransactionRoute: TransactionRouteWithChildren,
  ServiceCreateLazyRoute: ServiceCreateLazyRoute,
  ServiceIndexRoute: ServiceIndexRoute,
  ServiceEditServiceIdRoute: ServiceEditServiceIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account",
        "/auth",
        "/expense-manager",
        "/servicet",
        "/transaction",
        "/service/create",
        "/service/",
        "/service/edit/$serviceId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/account": {
      "filePath": "account.tsx",
      "children": [
        "/account/$accountId",
        "/account/create",
        "/account/",
        "/account/edit/$accountId",
        "/account/update/$accountId"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/login",
        "/auth/"
      ]
    },
    "/expense-manager": {
      "filePath": "expense-manager.tsx"
    },
    "/servicet": {
      "filePath": "servicet.tsx"
    },
    "/transaction": {
      "filePath": "transaction.tsx",
      "children": [
        "/transaction/",
        "/transaction/create/$accountId",
        "/transaction/edit/$transactionId"
      ]
    },
    "/account/$accountId": {
      "filePath": "account.$accountId.tsx",
      "parent": "/account"
    },
    "/account/create": {
      "filePath": "account.create.lazy.tsx",
      "parent": "/account"
    },
    "/auth/login": {
      "filePath": "auth.login.lazy.tsx",
      "parent": "/auth"
    },
    "/service/create": {
      "filePath": "service.create.lazy.tsx"
    },
    "/account/": {
      "filePath": "account.index.tsx",
      "parent": "/account"
    },
    "/auth/": {
      "filePath": "auth.index.tsx",
      "parent": "/auth"
    },
    "/service/": {
      "filePath": "service.index.tsx"
    },
    "/transaction/": {
      "filePath": "transaction.index.tsx",
      "parent": "/transaction"
    },
    "/account/edit/$accountId": {
      "filePath": "account.edit.$accountId.tsx",
      "parent": "/account"
    },
    "/account/update/$accountId": {
      "filePath": "account.update.$accountId.tsx",
      "parent": "/account"
    },
    "/service/edit/$serviceId": {
      "filePath": "service.edit.$serviceId.tsx"
    },
    "/transaction/create/$accountId": {
      "filePath": "transaction.create.$accountId.tsx",
      "parent": "/transaction"
    },
    "/transaction/edit/$transactionId": {
      "filePath": "transaction.edit.$transactionId.tsx",
      "parent": "/transaction"
    }
  }
}
ROUTE_MANIFEST_END */
