/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as AccountImport } from './routes/account'
import { Route as AuthIndexImport } from './routes/auth.index'
import { Route as AccountIndexImport } from './routes/account.index'
import { Route as AccountAccountIdImport } from './routes/account.$accountId'
import { Route as AccountUpdateAccountIdImport } from './routes/account.update.$accountId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const AccountCreateLazyImport = createFileRoute('/account/create')()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountRoute,
} as any)

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/auth.login.lazy').then((d) => d.Route))

const AccountCreateLazyRoute = AccountCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AccountRoute,
} as any).lazy(() =>
  import('./routes/account.create.lazy').then((d) => d.Route),
)

const AccountAccountIdRoute = AccountAccountIdImport.update({
  id: '/$accountId',
  path: '/$accountId',
  getParentRoute: () => AccountRoute,
} as any)

const AccountUpdateAccountIdRoute = AccountUpdateAccountIdImport.update({
  id: '/update/$accountId',
  path: '/update/$accountId',
  getParentRoute: () => AccountRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/account/$accountId': {
      id: '/account/$accountId'
      path: '/$accountId'
      fullPath: '/account/$accountId'
      preLoaderRoute: typeof AccountAccountIdImport
      parentRoute: typeof AccountImport
    }
    '/account/create': {
      id: '/account/create'
      path: '/create'
      fullPath: '/account/create'
      preLoaderRoute: typeof AccountCreateLazyImport
      parentRoute: typeof AccountImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof AuthImport
    }
    '/account/': {
      id: '/account/'
      path: '/'
      fullPath: '/account/'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof AccountImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/'
      fullPath: '/auth/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/account/update/$accountId': {
      id: '/account/update/$accountId'
      path: '/update/$accountId'
      fullPath: '/account/update/$accountId'
      preLoaderRoute: typeof AccountUpdateAccountIdImport
      parentRoute: typeof AccountImport
    }
  }
}

// Create and export the route tree

interface AccountRouteChildren {
  AccountAccountIdRoute: typeof AccountAccountIdRoute
  AccountCreateLazyRoute: typeof AccountCreateLazyRoute
  AccountIndexRoute: typeof AccountIndexRoute
  AccountUpdateAccountIdRoute: typeof AccountUpdateAccountIdRoute
}

const AccountRouteChildren: AccountRouteChildren = {
  AccountAccountIdRoute: AccountAccountIdRoute,
  AccountCreateLazyRoute: AccountCreateLazyRoute,
  AccountIndexRoute: AccountIndexRoute,
  AccountUpdateAccountIdRoute: AccountUpdateAccountIdRoute,
}

const AccountRouteWithChildren =
  AccountRoute._addFileChildren(AccountRouteChildren)

interface AuthRouteChildren {
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginLazyRoute: AuthLoginLazyRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/account': typeof AccountRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/account/$accountId': typeof AccountAccountIdRoute
  '/account/create': typeof AccountCreateLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/account/': typeof AccountIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/account/update/$accountId': typeof AccountUpdateAccountIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/account/$accountId': typeof AccountAccountIdRoute
  '/account/create': typeof AccountCreateLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/account': typeof AccountIndexRoute
  '/auth': typeof AuthIndexRoute
  '/account/update/$accountId': typeof AccountUpdateAccountIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/account': typeof AccountRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/account/$accountId': typeof AccountAccountIdRoute
  '/account/create': typeof AccountCreateLazyRoute
  '/auth/login': typeof AuthLoginLazyRoute
  '/account/': typeof AccountIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/account/update/$accountId': typeof AccountUpdateAccountIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/auth'
    | '/account/$accountId'
    | '/account/create'
    | '/auth/login'
    | '/account/'
    | '/auth/'
    | '/account/update/$accountId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account/$accountId'
    | '/account/create'
    | '/auth/login'
    | '/account'
    | '/auth'
    | '/account/update/$accountId'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/auth'
    | '/account/$accountId'
    | '/account/create'
    | '/auth/login'
    | '/account/'
    | '/auth/'
    | '/account/update/$accountId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AccountRoute: typeof AccountRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AccountRoute: AccountRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/account": {
      "filePath": "account.tsx",
      "children": [
        "/account/$accountId",
        "/account/create",
        "/account/",
        "/account/update/$accountId"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/login",
        "/auth/"
      ]
    },
    "/account/$accountId": {
      "filePath": "account.$accountId.tsx",
      "parent": "/account"
    },
    "/account/create": {
      "filePath": "account.create.lazy.tsx",
      "parent": "/account"
    },
    "/auth/login": {
      "filePath": "auth.login.lazy.tsx",
      "parent": "/auth"
    },
    "/account/": {
      "filePath": "account.index.tsx",
      "parent": "/account"
    },
    "/auth/": {
      "filePath": "auth.index.tsx",
      "parent": "/auth"
    },
    "/account/update/$accountId": {
      "filePath": "account.update.$accountId.tsx",
      "parent": "/account"
    }
  }
}
ROUTE_MANIFEST_END */
